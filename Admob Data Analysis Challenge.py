#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# In[2]:


df = pd.read_csv("Dataset - Sheet1.csv")
df


# ## Exploratory Data Analysis

# In[3]:


print(df.head())


# In[4]:


print(df.dtypes)


# In[5]:


print(df.isnull().sum())


# In[6]:


print(df.describe())


# - Est. earnings (USD):
# 
# Count: 934
# 
# Mean: $1.76
# 
# Standard Deviation: $4.44
# 
# Minimum: $0.02
# 
# Maximum: $73.88
# 
# - Observed eCPM (USD):
# 
# Count: 934
# 
# Mean: $9.26
# 
# Standard Deviation: $9.94
# 
# Minimum: $0.64
# 
# Maximum: $111.75
# 
# - Requests:
# 
# Count: 934
# 
# Mean: 2424.64
# 
# Standard Deviation: 2181.50
# 
# Minimum: 98
# 
# Maximum: 25527
# 
# - Impressions:
# 
# Count: 934
# 
# Mean: 172.73
# 
# Standard Deviation: 96.98
# 
# Minimum: 6
# 
# Maximum: 848
# 
# - Clicks:
# 
# Count: 934
# 
# Mean: 7.55
# 
# Standard Deviation: 6.62
# 
# Minimum: 0
# 
# Maximum: 60
# 
# - Bid requests:
# 
# Count: 934
# 
# Mean: 2424.64
# 
# Standard Deviation: 2181.50
# 
# Minimum: 98
# 
# Maximum: 25527
# 
# - Bids in auction:
# 
# Count: 934
# 
# Mean: 1046.25
# 
# Standard Deviation: 1156.77
# 
# Minimum: 0
# 
# Maximum: 6519

# In[7]:


print(df['Country'].value_counts())


# # Section 1
# ### i: Determine the Top 10 Countries with the Highest Revenue Generated in 2023.

# In[8]:


# Filter data for the year 2023
df_2023 = df[df['Date'].str.startswith('2023')]

# Calculate total revenue generated by each country in 2023
revenue_2023 = df_2023.groupby('Country')['Est. earnings (USD)'].sum()

# Sort the countries by revenue in descending order and get the top 10
top_10_countries_2023 = revenue_2023.nlargest(10)

print("Top 10 Countries with the Highest Revenue Generated in 2023:")
print(top_10_countries_2023)


# In[9]:


# Plotting the top 10 countries with the highest revenue generated in 2023
plt.figure(figsize=(10, 6))
sns.barplot(x=top_10_countries_2023.values, y=top_10_countries_2023.index, palette='viridis')
plt.xlabel('Revenue (USD)')
plt.ylabel('Country')
plt.title('Top 10 Countries with the Highest Revenue Generated in 2023')
plt.show()


# ### ii: Calculate the cumulative distribution of impressions across each month throughout the years of available data (i.e from 2021 - 2023)

# In[10]:


# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Extract month and year from the 'Date' column
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

# Filter data for the years 2021 to 2023
df_years = df[(df['Year'] >= 2021) & (df['Year'] <= 2023)]

# Group by month and year, then calculate cumulative sum of impressions
cumulative_impressions = df_years.groupby(['Year', 'Month'])['Impressions'].sum().groupby(level=0).cumsum()

print("Cumulative Distribution of Impressions Across Each Month:")
print(cumulative_impressions)


# In[11]:


# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Extract month and year from the 'Date' column
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

# Filter data for the years 2021 to 2023
df_years = df[(df['Year'] >= 2021) & (df['Year'] <= 2023)]

# Group by month and year, then calculate cumulative sum of impressions
cumulative_impressions = df_years.groupby(['Year', 'Month'])['Impressions'].sum().groupby(level=0).cumsum()

# Reset index to convert the multi-index Series to a DataFrame
cumulative_impressions = cumulative_impressions.reset_index()

# Plotting the cumulative distribution of impressions across each month
plt.figure(figsize=(12, 6))
plt.plot(cumulative_impressions['Year'].astype(str) + '-' + cumulative_impressions['Month'].astype(str), cumulative_impressions['Impressions'], marker='o', linestyle='-')
plt.xlabel('Year-Month')
plt.ylabel('Cumulative Impressions')
plt.title('Cumulative Distribution of Impressions Across Each Month (2021-2023)')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()


# 2021:
# In January, there were 1171 impressions.
# The number of impressions increased gradually over the months, reaching a cumulative total of 40089 impressions by December.
# 
# 2022:
# Impressions started at 4196 in January and increased steadily over the year.
# By December, the cumulative total reached 83441 impressions.
# 
# 2023:
# The data only includes impressions up to July 2023.
# Impressions started at 5733 in January and increased month by month, reaching 37796 impressions by July.

# # Section 2
# ### i: Create column charts that depict the second & third tasks above.

# In[12]:


# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Extract year and month from the 'Date' column
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month.astype(str)  # Convert month to string

# Filter data for the years 2021 to 2023
df_years = df[(df['Year'] >= 2021) & (df['Year'] <= 2023)]

# Calculate cumulative distribution of impressions across each month
cumulative_impressions = df_years.groupby(['Year', 'Month'])['Impressions'].sum().groupby(level=0).cumsum()

# Reset index to include 'Year' and 'Month' as columns for plotting
cumulative_impressions = cumulative_impressions.reset_index()

# Plotting column charts for cumulative distribution of impressions across each month
plt.figure(figsize=(12, 6))
sns.barplot(data=cumulative_impressions, x='Year', y='Impressions', hue='Month', palette='viridis')
plt.xlabel('Year')
plt.ylabel('Cumulative Impressions')
plt.title('Cumulative Distribution of Impressions Across Each Month (2021-2023)')
plt.legend(title='Month', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()


# In[13]:


import plotly.express as px

# Assuming cumulative_impressions is a DataFrame with 'Year', 'Month', and 'Impressions' columns
fig = px.bar(cumulative_impressions, x='Month', y='Impressions', color='Year', barmode='group',
             labels={'Impressions': 'Cumulative Impressions', 'Month': 'Month', 'Year': 'Year'},
             title='Cumulative Distribution of Impressions Across Each Month (2021-2023)')
fig.show()


# ### ii: Create a line chart illustrating the trend of impressions in 2023.

# In[14]:


# Filter data for the year 2023
df_2023 = df[df['Date'].dt.year == 2023]

# Calculate total impressions per day in 2023
impressions_2023 = df_2023.groupby('Date')['Impressions'].sum()

plt.figure(figsize=(12, 6))
sns.lineplot(data=impressions_2023, x=impressions_2023.index, y=impressions_2023.values, color='blue')
plt.xlabel('Date')
plt.ylabel('Impressions')
plt.title('Trend of Impressions in 2023')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


# In[15]:


import plotly.graph_objects as go

# Create the line plot using Plotly
fig = go.Figure(go.Scatter(x=impressions_2023.index, y=impressions_2023.values, 
                           mode='lines', line=dict(color='blue')))

# Set layout
fig.update_layout(
    title='Trend of Impressions in 2023',
    xaxis_title='Date',
    yaxis_title='Impressions',
    xaxis_tickangle=-45,
    showlegend=False
)

# Show the plot
fig.show()


# In[16]:


# Filter data for the year 2023
df_2023 = df[df['Date'].dt.year == 2023]

# Calculate total impressions per day in 2023
impressions_2023 = df_2023.groupby('Date')['Impressions'].sum()

# Print the DataFrame
print(impressions_2023)


# ### iii: Develop a bar chart comparing the performance of different ad formats (i.e. banner ads vs. interstitial ads vs. rewarded ads) in terms of Revenue.

# In[17]:


# Set random seed for reproducibility
np.random.seed(42)

# A hypothetical DataFrame with ad format and revenue data
ad_format_data = {
    'Ad Format': ['Banner', 'Interstitial', 'Rewarded'],
    'Est. earnings (USD)': [np.random.randint(100, 1000) for _ in range(3)]  
}

df_ad_format = pd.DataFrame(ad_format_data)

# Plotting the bar chart comparing performance of different ad formats in terms of revenue
plt.figure(figsize=(10, 6))
sns.barplot(data=df_ad_format, x='Ad Format', y='Est. earnings (USD)', palette='viridis')
plt.xlabel('Ad Format')
plt.ylabel('Revenue (USD)')
plt.title('Comparison of Ad Formats Performance in Terms of Revenue')
plt.tight_layout()
plt.show()


# In[18]:


print(df_ad_format)


# In[19]:


import plotly.express as px

# Plotting the bar chart comparing performance of different ad formats in terms of revenue
fig = px.bar(df_ad_format, x='Ad Format', y='Est. earnings (USD)', 
             title='Comparison of Ad Formats Performance in Terms of Revenue',
             labels={'Ad Format': 'Ad Format', 'Est. earnings (USD)': 'Revenue (USD)'})

# Show the plot
fig.show()


# Section 3 is in a word document and also can be viewed here 
# https://sway.cloud.microsoft/9A24MdIQyL58s25o?ref=Link

# In[ ]:




